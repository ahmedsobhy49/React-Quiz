{"ast":null,"code":"var _jsxFileName = \"/Users/ziadosama/Desktop/jonas react projects/projects/React Quiz/src/Components/Question.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Question({\n  currentDisplayingQuestion\n}) {\n  _s();\n  const optionRefs = useRef([]);\n  const {\n    question,\n    options,\n    correctOption,\n    points\n  } = currentDisplayingQuestion;\n  //   console.log(option.current);\n\n  function handleButtonOptionClick(index) {\n    optionRefs.current.map((option, index) => {\n      if (index === correctOption) {\n        return option.classList.add(...[\"correct\"]);\n      } else if (index !== correctOption) {\n        return option.classList.add(...[\"wrong\"]);\n      }\n    });\n\n    // if (index === correctOption) {\n    //   optionRefs.current[index].classList.add(...[\"correct\", \"answer\"]);\n    // } else {\n    //   optionRefs.current.map((option, index) => {\n    //     if (index !== correctOption)\n    //       return option.classList.add(...[\"wrong\", \"answer\"]);\n    //   });\n    // }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: question\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"options\",\n      children: options.map((option, index) => {\n        return /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `btn btn-option`,\n          ref: el => optionRefs.current[index] = el,\n          onClick: () => handleButtonOptionClick(index),\n          children: option\n        }, option, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n}\n\n// index === correctOption ? \"correct\" : \"wrong\"\n_s(Question, \"ewcEIWKAFHFXRZJt+H5qIqeiCTQ=\");\n_c = Question;\nvar _c;\n$RefreshReg$(_c, \"Question\");","map":{"version":3,"names":["React","useRef","jsxDEV","_jsxDEV","Question","currentDisplayingQuestion","_s","optionRefs","question","options","correctOption","points","handleButtonOptionClick","index","current","map","option","classList","add","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","el","onClick","_c","$RefreshReg$"],"sources":["/Users/ziadosama/Desktop/jonas react projects/projects/React Quiz/src/Components/Question.jsx"],"sourcesContent":["import React, { useRef } from \"react\";\n\nexport default function Question({ currentDisplayingQuestion }) {\n  const optionRefs = useRef([]);\n  const { question, options, correctOption, points } =\n    currentDisplayingQuestion;\n  //   console.log(option.current);\n\n  function handleButtonOptionClick(index) {\n    optionRefs.current.map((option, index) => {\n      if (index === correctOption) {\n        return option.classList.add(...[\"correct\"]);\n      } else if (index !== correctOption) {\n        return option.classList.add(...[\"wrong\"]);\n      }\n    });\n\n    // if (index === correctOption) {\n    //   optionRefs.current[index].classList.add(...[\"correct\", \"answer\"]);\n    // } else {\n    //   optionRefs.current.map((option, index) => {\n    //     if (index !== correctOption)\n    //       return option.classList.add(...[\"wrong\", \"answer\"]);\n    //   });\n    // }\n  }\n  return (\n    <div className=\"\">\n      <h2>{question}</h2>\n      <div className=\"options\">\n        {options.map((option, index) => {\n          return (\n            <button\n              key={option}\n              className={`btn btn-option`}\n              ref={(el) => (optionRefs.current[index] = el)}\n              onClick={() => handleButtonOptionClick(index)}\n            >\n              {option}\n            </button>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\n// index === correctOption ? \"correct\" : \"wrong\"\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,eAAe,SAASC,QAAQA,CAAC;EAAEC;AAA0B,CAAC,EAAE;EAAAC,EAAA;EAC9D,MAAMC,UAAU,GAAGN,MAAM,CAAC,EAAE,CAAC;EAC7B,MAAM;IAAEO,QAAQ;IAAEC,OAAO;IAAEC,aAAa;IAAEC;EAAO,CAAC,GAChDN,yBAAyB;EAC3B;;EAEA,SAASO,uBAAuBA,CAACC,KAAK,EAAE;IACtCN,UAAU,CAACO,OAAO,CAACC,GAAG,CAAC,CAACC,MAAM,EAAEH,KAAK,KAAK;MACxC,IAAIA,KAAK,KAAKH,aAAa,EAAE;QAC3B,OAAOM,MAAM,CAACC,SAAS,CAACC,GAAG,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;MAC7C,CAAC,MAAM,IAAIL,KAAK,KAAKH,aAAa,EAAE;QAClC,OAAOM,MAAM,CAACC,SAAS,CAACC,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;MAC3C;IACF,CAAC,CAAC;;IAEF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACF;EACA,oBACEf,OAAA;IAAKgB,SAAS,EAAC,EAAE;IAAAC,QAAA,gBACfjB,OAAA;MAAAiB,QAAA,EAAKZ;IAAQ;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACnBrB,OAAA;MAAKgB,SAAS,EAAC,SAAS;MAAAC,QAAA,EACrBX,OAAO,CAACM,GAAG,CAAC,CAACC,MAAM,EAAEH,KAAK,KAAK;QAC9B,oBACEV,OAAA;UAEEgB,SAAS,EAAG,gBAAgB;UAC5BM,GAAG,EAAGC,EAAE,IAAMnB,UAAU,CAACO,OAAO,CAACD,KAAK,CAAC,GAAGa,EAAI;UAC9CC,OAAO,EAAEA,CAAA,KAAMf,uBAAuB,CAACC,KAAK,CAAE;UAAAO,QAAA,EAE7CJ;QAAM,GALFA,MAAM;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAML,CAAC;MAEb,CAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;;AAEA;AAAAlB,EAAA,CA7CwBF,QAAQ;AAAAwB,EAAA,GAARxB,QAAQ;AAAA,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}