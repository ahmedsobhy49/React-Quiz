{"ast":null,"code":"var _jsxFileName = \"/Users/ziadosama/Desktop/jonas react projects/projects/React Quiz/src/Components/Question.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Question({\n  currentDisplayingQuestion\n}) {\n  _s();\n  const optionRefs = useRef([]);\n  const {\n    question,\n    options,\n    correctOption,\n    points\n  } = currentDisplayingQuestion;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: question\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"options\",\n      children: options.map((option, index) => {\n        return /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `btn btn-option`,\n          ref: el => optionRefs.current[index] = el,\n          onClick: () => {\n            handleButtonOptionClick(index);\n          },\n          children: option\n        }, option, false, {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this);\n}\n\n//   function handleButtonOptionClick(idx) {\n//     optionRefs.current.map((option, index) => {\n//       if (index === correctOption) {\n//         return option.classList.add(...[\"correct\"]);\n//       } else if (index !== correctOption) {\n//         return option.classList.add(...[\"wrong\"]);\n//       }\n//       if (index === idx) {\n//         return option.classList.add(\"answer\");\n//       }\n//     });\n// if (index === correctOption) {\n//   optionRefs.current[index].classList.add(...[\"correct\", \"answer\"]);\n// } else {\n//   optionRefs.current.map((option, index) => {\n//     if (index !== correctOption)\n//       return option.classList.add(...[\"wrong\", \"answer\"]);\n//   });\n// }\n//}\n_s(Question, \"ewcEIWKAFHFXRZJt+H5qIqeiCTQ=\");\n_c = Question;\nvar _c;\n$RefreshReg$(_c, \"Question\");","map":{"version":3,"names":["React","useRef","jsxDEV","_jsxDEV","Question","currentDisplayingQuestion","_s","optionRefs","question","options","correctOption","points","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","option","index","ref","el","current","onClick","handleButtonOptionClick","_c","$RefreshReg$"],"sources":["/Users/ziadosama/Desktop/jonas react projects/projects/React Quiz/src/Components/Question.jsx"],"sourcesContent":["import React, { useRef } from \"react\";\n\nexport default function Question({ currentDisplayingQuestion }) {\n  const optionRefs = useRef([]);\n  const { question, options, correctOption, points } =\n    currentDisplayingQuestion;\n\n  return (\n    <div className=\"\">\n      <h2>{question}</h2>\n      <div className=\"options\">\n        {options.map((option, index) => {\n          return (\n            <button\n              key={option}\n              className={`btn btn-option`}\n              ref={(el) => (optionRefs.current[index] = el)}\n              onClick={() => {\n                handleButtonOptionClick(index);\n              }}\n            >\n              {option}\n            </button>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\n//   function handleButtonOptionClick(idx) {\n//     optionRefs.current.map((option, index) => {\n//       if (index === correctOption) {\n//         return option.classList.add(...[\"correct\"]);\n//       } else if (index !== correctOption) {\n//         return option.classList.add(...[\"wrong\"]);\n//       }\n//       if (index === idx) {\n//         return option.classList.add(\"answer\");\n//       }\n//     });\n// if (index === correctOption) {\n//   optionRefs.current[index].classList.add(...[\"correct\", \"answer\"]);\n// } else {\n//   optionRefs.current.map((option, index) => {\n//     if (index !== correctOption)\n//       return option.classList.add(...[\"wrong\", \"answer\"]);\n//   });\n// }\n//}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,eAAe,SAASC,QAAQA,CAAC;EAAEC;AAA0B,CAAC,EAAE;EAAAC,EAAA;EAC9D,MAAMC,UAAU,GAAGN,MAAM,CAAC,EAAE,CAAC;EAC7B,MAAM;IAAEO,QAAQ;IAAEC,OAAO;IAAEC,aAAa;IAAEC;EAAO,CAAC,GAChDN,yBAAyB;EAE3B,oBACEF,OAAA;IAAKS,SAAS,EAAC,EAAE;IAAAC,QAAA,gBACfV,OAAA;MAAAU,QAAA,EAAKL;IAAQ;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACnBd,OAAA;MAAKS,SAAS,EAAC,SAAS;MAAAC,QAAA,EACrBJ,OAAO,CAACS,GAAG,CAAC,CAACC,MAAM,EAAEC,KAAK,KAAK;QAC9B,oBACEjB,OAAA;UAEES,SAAS,EAAG,gBAAgB;UAC5BS,GAAG,EAAGC,EAAE,IAAMf,UAAU,CAACgB,OAAO,CAACH,KAAK,CAAC,GAAGE,EAAI;UAC9CE,OAAO,EAAEA,CAAA,KAAM;YACbC,uBAAuB,CAACL,KAAK,CAAC;UAChC,CAAE;UAAAP,QAAA,EAEDM;QAAM,GAPFA,MAAM;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAQL,CAAC;MAEb,CAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAAX,EAAA,CA/CwBF,QAAQ;AAAAsB,EAAA,GAARtB,QAAQ;AAAA,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}